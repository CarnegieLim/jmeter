/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 385.0, "minX": 0.0, "maxY": 67731.0, "series": [{"data": [[0.0, 385.0], [0.1, 387.0], [0.2, 618.0], [0.3, 637.0], [0.4, 732.0], [0.5, 795.0], [0.6, 813.0], [0.7, 890.0], [0.8, 934.0], [0.9, 991.0], [1.0, 1003.0], [1.1, 1045.0], [1.2, 1214.0], [1.3, 1285.0], [1.4, 1299.0], [1.5, 1366.0], [1.6, 1399.0], [1.7, 1451.0], [1.8, 1521.0], [1.9, 1543.0], [2.0, 1566.0], [2.1, 1610.0], [2.2, 1643.0], [2.3, 1681.0], [2.4, 1789.0], [2.5, 1803.0], [2.6, 1883.0], [2.7, 1951.0], [2.8, 1966.0], [2.9, 2029.0], [3.0, 2060.0], [3.1, 2078.0], [3.2, 2119.0], [3.3, 2176.0], [3.4, 2182.0], [3.5, 2230.0], [3.6, 2279.0], [3.7, 2324.0], [3.8, 2397.0], [3.9, 2459.0], [4.0, 2467.0], [4.1, 2589.0], [4.2, 2632.0], [4.3, 2680.0], [4.4, 2739.0], [4.5, 2748.0], [4.6, 2786.0], [4.7, 2897.0], [4.8, 2911.0], [4.9, 2956.0], [5.0, 2975.0], [5.1, 2985.0], [5.2, 2994.0], [5.3, 3020.0], [5.4, 3078.0], [5.5, 3107.0], [5.6, 3121.0], [5.7, 3161.0], [5.8, 3177.0], [5.9, 3246.0], [6.0, 3313.0], [6.1, 3324.0], [6.2, 3365.0], [6.3, 3396.0], [6.4, 3438.0], [6.5, 3479.0], [6.6, 3486.0], [6.7, 3552.0], [6.8, 3593.0], [6.9, 3619.0], [7.0, 3702.0], [7.1, 3735.0], [7.2, 3761.0], [7.3, 3783.0], [7.4, 3849.0], [7.5, 3893.0], [7.6, 3904.0], [7.7, 3953.0], [7.8, 4059.0], [7.9, 4094.0], [8.0, 4155.0], [8.1, 4176.0], [8.2, 4183.0], [8.3, 4209.0], [8.4, 4256.0], [8.5, 4273.0], [8.6, 4300.0], [8.7, 4308.0], [8.8, 4330.0], [8.9, 4369.0], [9.0, 4385.0], [9.1, 4408.0], [9.2, 4472.0], [9.3, 4497.0], [9.4, 4527.0], [9.5, 4540.0], [9.6, 4584.0], [9.7, 4586.0], [9.8, 4600.0], [9.9, 4643.0], [10.0, 4661.0], [10.1, 4697.0], [10.2, 4748.0], [10.3, 4766.0], [10.4, 4784.0], [10.5, 4799.0], [10.6, 4852.0], [10.7, 4882.0], [10.8, 4899.0], [10.9, 4934.0], [11.0, 4995.0], [11.1, 5030.0], [11.2, 5057.0], [11.3, 5079.0], [11.4, 5117.0], [11.5, 5139.0], [11.6, 5179.0], [11.7, 5186.0], [11.8, 5258.0], [11.9, 5275.0], [12.0, 5349.0], [12.1, 5406.0], [12.2, 5508.0], [12.3, 5542.0], [12.4, 5595.0], [12.5, 5643.0], [12.6, 5700.0], [12.7, 5743.0], [12.8, 5760.0], [12.9, 5776.0], [13.0, 5784.0], [13.1, 5815.0], [13.2, 5862.0], [13.3, 5917.0], [13.4, 5946.0], [13.5, 5953.0], [13.6, 6024.0], [13.7, 6049.0], [13.8, 6052.0], [13.9, 6082.0], [14.0, 6102.0], [14.1, 6132.0], [14.2, 6194.0], [14.3, 6237.0], [14.4, 6305.0], [14.5, 6318.0], [14.6, 6353.0], [14.7, 6375.0], [14.8, 6387.0], [14.9, 6401.0], [15.0, 6433.0], [15.1, 6461.0], [15.2, 6492.0], [15.3, 6495.0], [15.4, 6533.0], [15.5, 6563.0], [15.6, 6608.0], [15.7, 6612.0], [15.8, 6631.0], [15.9, 6640.0], [16.0, 6691.0], [16.1, 6723.0], [16.2, 6731.0], [16.3, 6744.0], [16.4, 6762.0], [16.5, 6794.0], [16.6, 6798.0], [16.7, 6839.0], [16.8, 6852.0], [16.9, 6880.0], [17.0, 6903.0], [17.1, 6904.0], [17.2, 6937.0], [17.3, 6958.0], [17.4, 7007.0], [17.5, 7047.0], [17.6, 7066.0], [17.7, 7080.0], [17.8, 7101.0], [17.9, 7118.0], [18.0, 7183.0], [18.1, 7189.0], [18.2, 7236.0], [18.3, 7248.0], [18.4, 7268.0], [18.5, 7312.0], [18.6, 7323.0], [18.7, 7341.0], [18.8, 7358.0], [18.9, 7358.0], [19.0, 7367.0], [19.1, 7377.0], [19.2, 7435.0], [19.3, 7466.0], [19.4, 7488.0], [19.5, 7509.0], [19.6, 7539.0], [19.7, 7606.0], [19.8, 7616.0], [19.9, 7645.0], [20.0, 7670.0], [20.1, 7671.0], [20.2, 7684.0], [20.3, 7702.0], [20.4, 7716.0], [20.5, 7741.0], [20.6, 7794.0], [20.7, 7817.0], [20.8, 7871.0], [20.9, 7890.0], [21.0, 7909.0], [21.1, 7935.0], [21.2, 7978.0], [21.3, 7984.0], [21.4, 8042.0], [21.5, 8045.0], [21.6, 8082.0], [21.7, 8087.0], [21.8, 8112.0], [21.9, 8140.0], [22.0, 8157.0], [22.1, 8173.0], [22.2, 8211.0], [22.3, 8240.0], [22.4, 8318.0], [22.5, 8376.0], [22.6, 8431.0], [22.7, 8480.0], [22.8, 8541.0], [22.9, 8547.0], [23.0, 8555.0], [23.1, 8569.0], [23.2, 8598.0], [23.3, 8619.0], [23.4, 8744.0], [23.5, 8773.0], [23.6, 8818.0], [23.7, 8855.0], [23.8, 8898.0], [23.9, 8900.0], [24.0, 8935.0], [24.1, 8964.0], [24.2, 9000.0], [24.3, 9036.0], [24.4, 9053.0], [24.5, 9088.0], [24.6, 9118.0], [24.7, 9138.0], [24.8, 9186.0], [24.9, 9201.0], [25.0, 9229.0], [25.1, 9260.0], [25.2, 9302.0], [25.3, 9377.0], [25.4, 9423.0], [25.5, 9431.0], [25.6, 9444.0], [25.7, 9465.0], [25.8, 9504.0], [25.9, 9524.0], [26.0, 9542.0], [26.1, 9558.0], [26.2, 9597.0], [26.3, 9608.0], [26.4, 9635.0], [26.5, 9655.0], [26.6, 9703.0], [26.7, 9732.0], [26.8, 9769.0], [26.9, 9792.0], [27.0, 9835.0], [27.1, 9849.0], [27.2, 9902.0], [27.3, 9944.0], [27.4, 9967.0], [27.5, 9981.0], [27.6, 10015.0], [27.7, 10042.0], [27.8, 10100.0], [27.9, 10110.0], [28.0, 10143.0], [28.1, 10144.0], [28.2, 10168.0], [28.3, 10178.0], [28.4, 10207.0], [28.5, 10226.0], [28.6, 10265.0], [28.7, 10275.0], [28.8, 10295.0], [28.9, 10298.0], [29.0, 10304.0], [29.1, 10328.0], [29.2, 10376.0], [29.3, 10387.0], [29.4, 10437.0], [29.5, 10446.0], [29.6, 10490.0], [29.7, 10496.0], [29.8, 10548.0], [29.9, 10566.0], [30.0, 10599.0], [30.1, 10615.0], [30.2, 10633.0], [30.3, 10656.0], [30.4, 10688.0], [30.5, 10711.0], [30.6, 10728.0], [30.7, 10745.0], [30.8, 10806.0], [30.9, 10824.0], [31.0, 10851.0], [31.1, 10861.0], [31.2, 10869.0], [31.3, 10880.0], [31.4, 10898.0], [31.5, 10911.0], [31.6, 10922.0], [31.7, 10935.0], [31.8, 10978.0], [31.9, 11004.0], [32.0, 11020.0], [32.1, 11043.0], [32.2, 11072.0], [32.3, 11079.0], [32.4, 11160.0], [32.5, 11176.0], [32.6, 11216.0], [32.7, 11267.0], [32.8, 11286.0], [32.9, 11296.0], [33.0, 11311.0], [33.1, 11367.0], [33.2, 11382.0], [33.3, 11469.0], [33.4, 11597.0], [33.5, 11704.0], [33.6, 11749.0], [33.7, 11779.0], [33.8, 11787.0], [33.9, 11790.0], [34.0, 11810.0], [34.1, 11817.0], [34.2, 11835.0], [34.3, 11870.0], [34.4, 11922.0], [34.5, 11960.0], [34.6, 12010.0], [34.7, 12050.0], [34.8, 12105.0], [34.9, 12136.0], [35.0, 12197.0], [35.1, 12225.0], [35.2, 12287.0], [35.3, 12294.0], [35.4, 12358.0], [35.5, 12390.0], [35.6, 12418.0], [35.7, 12442.0], [35.8, 12472.0], [35.9, 12493.0], [36.0, 12560.0], [36.1, 12581.0], [36.2, 12601.0], [36.3, 12626.0], [36.4, 12733.0], [36.5, 12735.0], [36.6, 12768.0], [36.7, 12785.0], [36.8, 12822.0], [36.9, 12834.0], [37.0, 12893.0], [37.1, 12902.0], [37.2, 12915.0], [37.3, 12927.0], [37.4, 12997.0], [37.5, 13003.0], [37.6, 13011.0], [37.7, 13078.0], [37.8, 13163.0], [37.9, 13175.0], [38.0, 13198.0], [38.1, 13233.0], [38.2, 13264.0], [38.3, 13273.0], [38.4, 13306.0], [38.5, 13324.0], [38.6, 13348.0], [38.7, 13386.0], [38.8, 13487.0], [38.9, 13494.0], [39.0, 13522.0], [39.1, 13539.0], [39.2, 13555.0], [39.3, 13570.0], [39.4, 13589.0], [39.5, 13613.0], [39.6, 13639.0], [39.7, 13651.0], [39.8, 13674.0], [39.9, 13688.0], [40.0, 13714.0], [40.1, 13761.0], [40.2, 13782.0], [40.3, 13796.0], [40.4, 13806.0], [40.5, 13815.0], [40.6, 13848.0], [40.7, 13876.0], [40.8, 13907.0], [40.9, 13915.0], [41.0, 13948.0], [41.1, 13957.0], [41.2, 14031.0], [41.3, 14050.0], [41.4, 14063.0], [41.5, 14083.0], [41.6, 14110.0], [41.7, 14121.0], [41.8, 14149.0], [41.9, 14156.0], [42.0, 14178.0], [42.1, 14180.0], [42.2, 14193.0], [42.3, 14225.0], [42.4, 14244.0], [42.5, 14253.0], [42.6, 14270.0], [42.7, 14272.0], [42.8, 14294.0], [42.9, 14297.0], [43.0, 14313.0], [43.1, 14338.0], [43.2, 14387.0], [43.3, 14406.0], [43.4, 14445.0], [43.5, 14455.0], [43.6, 14473.0], [43.7, 14483.0], [43.8, 14497.0], [43.9, 14518.0], [44.0, 14549.0], [44.1, 14576.0], [44.2, 14699.0], [44.3, 14738.0], [44.4, 14839.0], [44.5, 14889.0], [44.6, 14958.0], [44.7, 14963.0], [44.8, 15018.0], [44.9, 15037.0], [45.0, 15049.0], [45.1, 15060.0], [45.2, 15099.0], [45.3, 15105.0], [45.4, 15126.0], [45.5, 15153.0], [45.6, 15154.0], [45.7, 15195.0], [45.8, 15209.0], [45.9, 15219.0], [46.0, 15237.0], [46.1, 15247.0], [46.2, 15279.0], [46.3, 15318.0], [46.4, 15375.0], [46.5, 15407.0], [46.6, 15433.0], [46.7, 15460.0], [46.8, 15511.0], [46.9, 15524.0], [47.0, 15557.0], [47.1, 15580.0], [47.2, 15595.0], [47.3, 15606.0], [47.4, 15622.0], [47.5, 15670.0], [47.6, 15715.0], [47.7, 15737.0], [47.8, 15757.0], [47.9, 15791.0], [48.0, 15843.0], [48.1, 15869.0], [48.2, 15891.0], [48.3, 15926.0], [48.4, 15980.0], [48.5, 16003.0], [48.6, 16033.0], [48.7, 16058.0], [48.8, 16102.0], [48.9, 16123.0], [49.0, 16145.0], [49.1, 16162.0], [49.2, 16187.0], [49.3, 16220.0], [49.4, 16241.0], [49.5, 16244.0], [49.6, 16284.0], [49.7, 16294.0], [49.8, 16357.0], [49.9, 16365.0], [50.0, 16385.0], [50.1, 16408.0], [50.2, 16435.0], [50.3, 16487.0], [50.4, 16505.0], [50.5, 16511.0], [50.6, 16534.0], [50.7, 16555.0], [50.8, 16565.0], [50.9, 16614.0], [51.0, 16700.0], [51.1, 16724.0], [51.2, 16760.0], [51.3, 16763.0], [51.4, 16778.0], [51.5, 16836.0], [51.6, 16852.0], [51.7, 16894.0], [51.8, 16940.0], [51.9, 16955.0], [52.0, 16984.0], [52.1, 16994.0], [52.2, 17012.0], [52.3, 17028.0], [52.4, 17046.0], [52.5, 17053.0], [52.6, 17069.0], [52.7, 17086.0], [52.8, 17118.0], [52.9, 17121.0], [53.0, 17139.0], [53.1, 17150.0], [53.2, 17176.0], [53.3, 17183.0], [53.4, 17223.0], [53.5, 17280.0], [53.6, 17337.0], [53.7, 17368.0], [53.8, 17428.0], [53.9, 17454.0], [54.0, 17485.0], [54.1, 17543.0], [54.2, 17660.0], [54.3, 17668.0], [54.4, 17733.0], [54.5, 17760.0], [54.6, 17778.0], [54.7, 17814.0], [54.8, 17847.0], [54.9, 17857.0], [55.0, 17899.0], [55.1, 17903.0], [55.2, 17928.0], [55.3, 17974.0], [55.4, 17994.0], [55.5, 18040.0], [55.6, 18057.0], [55.7, 18086.0], [55.8, 18095.0], [55.9, 18130.0], [56.0, 18155.0], [56.1, 18189.0], [56.2, 18207.0], [56.3, 18224.0], [56.4, 18245.0], [56.5, 18281.0], [56.6, 18300.0], [56.7, 18311.0], [56.8, 18352.0], [56.9, 18361.0], [57.0, 18383.0], [57.1, 18459.0], [57.2, 18480.0], [57.3, 18483.0], [57.4, 18531.0], [57.5, 18536.0], [57.6, 18579.0], [57.7, 18590.0], [57.8, 18608.0], [57.9, 18630.0], [58.0, 18654.0], [58.1, 18683.0], [58.2, 18710.0], [58.3, 18765.0], [58.4, 18787.0], [58.5, 18794.0], [58.6, 18832.0], [58.7, 18837.0], [58.8, 18842.0], [58.9, 18863.0], [59.0, 18886.0], [59.1, 18931.0], [59.2, 19005.0], [59.3, 19025.0], [59.4, 19065.0], [59.5, 19101.0], [59.6, 19119.0], [59.7, 19164.0], [59.8, 19180.0], [59.9, 19198.0], [60.0, 19212.0], [60.1, 19246.0], [60.2, 19259.0], [60.3, 19275.0], [60.4, 19285.0], [60.5, 19326.0], [60.6, 19340.0], [60.7, 19370.0], [60.8, 19445.0], [60.9, 19481.0], [61.0, 19544.0], [61.1, 19585.0], [61.2, 19613.0], [61.3, 19643.0], [61.4, 19687.0], [61.5, 19700.0], [61.6, 19739.0], [61.7, 19743.0], [61.8, 19784.0], [61.9, 19788.0], [62.0, 19849.0], [62.1, 19906.0], [62.2, 19931.0], [62.3, 19956.0], [62.4, 19965.0], [62.5, 19980.0], [62.6, 20029.0], [62.7, 20061.0], [62.8, 20111.0], [62.9, 20125.0], [63.0, 20142.0], [63.1, 20152.0], [63.2, 20166.0], [63.3, 20181.0], [63.4, 20232.0], [63.5, 20275.0], [63.6, 20310.0], [63.7, 20334.0], [63.8, 20377.0], [63.9, 20382.0], [64.0, 20461.0], [64.1, 20486.0], [64.2, 20512.0], [64.3, 20535.0], [64.4, 20538.0], [64.5, 20546.0], [64.6, 20591.0], [64.7, 20647.0], [64.8, 20689.0], [64.9, 20707.0], [65.0, 20735.0], [65.1, 20753.0], [65.2, 20815.0], [65.3, 20834.0], [65.4, 20860.0], [65.5, 20949.0], [65.6, 20983.0], [65.7, 20997.0], [65.8, 21004.0], [65.9, 21014.0], [66.0, 21025.0], [66.1, 21051.0], [66.2, 21086.0], [66.3, 21138.0], [66.4, 21152.0], [66.5, 21158.0], [66.6, 21192.0], [66.7, 21194.0], [66.8, 21222.0], [66.9, 21233.0], [67.0, 21248.0], [67.1, 21270.0], [67.2, 21295.0], [67.3, 21316.0], [67.4, 21341.0], [67.5, 21402.0], [67.6, 21426.0], [67.7, 21443.0], [67.8, 21464.0], [67.9, 21493.0], [68.0, 21552.0], [68.1, 21559.0], [68.2, 21575.0], [68.3, 21623.0], [68.4, 21658.0], [68.5, 21671.0], [68.6, 21706.0], [68.7, 21711.0], [68.8, 21721.0], [68.9, 21740.0], [69.0, 21751.0], [69.1, 21772.0], [69.2, 21818.0], [69.3, 21850.0], [69.4, 21874.0], [69.5, 21909.0], [69.6, 21939.0], [69.7, 21959.0], [69.8, 21990.0], [69.9, 22014.0], [70.0, 22060.0], [70.1, 22133.0], [70.2, 22173.0], [70.3, 22180.0], [70.4, 22199.0], [70.5, 22253.0], [70.6, 22275.0], [70.7, 22302.0], [70.8, 22345.0], [70.9, 22354.0], [71.0, 22458.0], [71.1, 22465.0], [71.2, 22474.0], [71.3, 22517.0], [71.4, 22548.0], [71.5, 22573.0], [71.6, 22621.0], [71.7, 22638.0], [71.8, 22708.0], [71.9, 22748.0], [72.0, 22770.0], [72.1, 22790.0], [72.2, 22818.0], [72.3, 22864.0], [72.4, 22923.0], [72.5, 22949.0], [72.6, 22965.0], [72.7, 22981.0], [72.8, 22986.0], [72.9, 23017.0], [73.0, 23034.0], [73.1, 23070.0], [73.2, 23087.0], [73.3, 23105.0], [73.4, 23146.0], [73.5, 23182.0], [73.6, 23200.0], [73.7, 23232.0], [73.8, 23243.0], [73.9, 23260.0], [74.0, 23272.0], [74.1, 23289.0], [74.2, 23307.0], [74.3, 23332.0], [74.4, 23339.0], [74.5, 23349.0], [74.6, 23379.0], [74.7, 23390.0], [74.8, 23422.0], [74.9, 23489.0], [75.0, 23523.0], [75.1, 23566.0], [75.2, 23605.0], [75.3, 23622.0], [75.4, 23685.0], [75.5, 23722.0], [75.6, 23727.0], [75.7, 23767.0], [75.8, 23804.0], [75.9, 23903.0], [76.0, 23908.0], [76.1, 23936.0], [76.2, 23945.0], [76.3, 23976.0], [76.4, 23988.0], [76.5, 23999.0], [76.6, 24026.0], [76.7, 24063.0], [76.8, 24077.0], [76.9, 24109.0], [77.0, 24114.0], [77.1, 24174.0], [77.2, 24178.0], [77.3, 24219.0], [77.4, 24245.0], [77.5, 24329.0], [77.6, 24347.0], [77.7, 24384.0], [77.8, 24404.0], [77.9, 24439.0], [78.0, 24448.0], [78.1, 24495.0], [78.2, 24514.0], [78.3, 24537.0], [78.4, 24557.0], [78.5, 24571.0], [78.6, 24580.0], [78.7, 24602.0], [78.8, 24636.0], [78.9, 24661.0], [79.0, 24674.0], [79.1, 24677.0], [79.2, 24686.0], [79.3, 24717.0], [79.4, 24737.0], [79.5, 24763.0], [79.6, 24781.0], [79.7, 24811.0], [79.8, 24822.0], [79.9, 24850.0], [80.0, 24867.0], [80.1, 24879.0], [80.2, 24907.0], [80.3, 24952.0], [80.4, 24981.0], [80.5, 25041.0], [80.6, 25069.0], [80.7, 25089.0], [80.8, 25101.0], [80.9, 25123.0], [81.0, 25169.0], [81.1, 25195.0], [81.2, 25205.0], [81.3, 25277.0], [81.4, 25313.0], [81.5, 25318.0], [81.6, 25327.0], [81.7, 25339.0], [81.8, 25357.0], [81.9, 25383.0], [82.0, 25429.0], [82.1, 25444.0], [82.2, 25476.0], [82.3, 25501.0], [82.4, 25523.0], [82.5, 25550.0], [82.6, 25579.0], [82.7, 25638.0], [82.8, 25679.0], [82.9, 25687.0], [83.0, 25730.0], [83.1, 25765.0], [83.2, 25770.0], [83.3, 25799.0], [83.4, 25814.0], [83.5, 25821.0], [83.6, 25844.0], [83.7, 25879.0], [83.8, 25912.0], [83.9, 25966.0], [84.0, 25998.0], [84.1, 26006.0], [84.2, 26045.0], [84.3, 26062.0], [84.4, 26074.0], [84.5, 26100.0], [84.6, 26111.0], [84.7, 26140.0], [84.8, 26153.0], [84.9, 26185.0], [85.0, 26216.0], [85.1, 26232.0], [85.2, 26252.0], [85.3, 26296.0], [85.4, 26299.0], [85.5, 26309.0], [85.6, 26327.0], [85.7, 26351.0], [85.8, 26398.0], [85.9, 26435.0], [86.0, 26459.0], [86.1, 26498.0], [86.2, 26503.0], [86.3, 26545.0], [86.4, 26575.0], [86.5, 26597.0], [86.6, 26651.0], [86.7, 26734.0], [86.8, 26744.0], [86.9, 26783.0], [87.0, 26810.0], [87.1, 26830.0], [87.2, 26840.0], [87.3, 26871.0], [87.4, 26938.0], [87.5, 27000.0], [87.6, 27003.0], [87.7, 27055.0], [87.8, 27068.0], [87.9, 27082.0], [88.0, 27091.0], [88.1, 27105.0], [88.2, 27169.0], [88.3, 27213.0], [88.4, 27227.0], [88.5, 27269.0], [88.6, 27278.0], [88.7, 27333.0], [88.8, 27362.0], [88.9, 27376.0], [89.0, 27401.0], [89.1, 27437.0], [89.2, 27466.0], [89.3, 27489.0], [89.4, 27514.0], [89.5, 27546.0], [89.6, 27572.0], [89.7, 27609.0], [89.8, 27624.0], [89.9, 27669.0], [90.0, 27704.0], [90.1, 27725.0], [90.2, 27740.0], [90.3, 27793.0], [90.4, 27851.0], [90.5, 27900.0], [90.6, 27908.0], [90.7, 27923.0], [90.8, 27985.0], [90.9, 28031.0], [91.0, 28037.0], [91.1, 28106.0], [91.2, 28124.0], [91.3, 28167.0], [91.4, 28173.0], [91.5, 28227.0], [91.6, 28244.0], [91.7, 28254.0], [91.8, 28310.0], [91.9, 28334.0], [92.0, 28337.0], [92.1, 28348.0], [92.2, 28372.0], [92.3, 28451.0], [92.4, 28468.0], [92.5, 28505.0], [92.6, 28550.0], [92.7, 28605.0], [92.8, 28627.0], [92.9, 28656.0], [93.0, 28668.0], [93.1, 28688.0], [93.2, 28720.0], [93.3, 28760.0], [93.4, 28769.0], [93.5, 28774.0], [93.6, 28818.0], [93.7, 28832.0], [93.8, 28836.0], [93.9, 28854.0], [94.0, 28887.0], [94.1, 28964.0], [94.2, 28974.0], [94.3, 29035.0], [94.4, 29057.0], [94.5, 29168.0], [94.6, 29169.0], [94.7, 29224.0], [94.8, 29235.0], [94.9, 29250.0], [95.0, 29314.0], [95.1, 29370.0], [95.2, 29395.0], [95.3, 29411.0], [95.4, 29431.0], [95.5, 29452.0], [95.6, 29455.0], [95.7, 29483.0], [95.8, 29541.0], [95.9, 29592.0], [96.0, 29666.0], [96.1, 29714.0], [96.2, 29757.0], [96.3, 29803.0], [96.4, 29843.0], [96.5, 29916.0], [96.6, 29974.0], [96.7, 30110.0], [96.8, 30189.0], [96.9, 30293.0], [97.0, 30419.0], [97.1, 30481.0], [97.2, 30665.0], [97.3, 30693.0], [97.4, 30746.0], [97.5, 30850.0], [97.6, 30905.0], [97.7, 31161.0], [97.8, 31194.0], [97.9, 31399.0], [98.0, 31467.0], [98.1, 31878.0], [98.2, 31974.0], [98.3, 32394.0], [98.4, 32802.0], [98.5, 33792.0], [98.6, 34052.0], [98.7, 36137.0], [98.8, 36650.0], [98.9, 37066.0], [99.0, 37169.0], [99.1, 37269.0], [99.2, 37308.0], [99.3, 37507.0], [99.4, 37581.0], [99.5, 37790.0], [99.6, 37807.0], [99.7, 40759.0], [99.8, 40839.0], [99.9, 67225.0], [100.0, 67731.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 18.0, "series": [{"data": [[33700.0, 2.0], [36100.0, 2.0], [37700.0, 2.0], [37300.0, 2.0], [44100.0, 1.0], [67400.0, 1.0], [300.0, 3.0], [500.0, 2.0], [600.0, 5.0], [700.0, 3.0], [800.0, 5.0], [900.0, 5.0], [1000.0, 5.0], [1100.0, 1.0], [1200.0, 6.0], [1300.0, 5.0], [1400.0, 4.0], [1500.0, 8.0], [1600.0, 6.0], [1700.0, 4.0], [1800.0, 3.0], [1900.0, 5.0], [2000.0, 8.0], [2100.0, 7.0], [2200.0, 7.0], [2300.0, 3.0], [2400.0, 5.0], [2500.0, 3.0], [2600.0, 5.0], [2700.0, 7.0], [2800.0, 3.0], [2900.0, 12.0], [3000.0, 6.0], [3100.0, 9.0], [3300.0, 10.0], [3200.0, 3.0], [3400.0, 7.0], [3500.0, 5.0], [3700.0, 9.0], [3600.0, 4.0], [3800.0, 6.0], [3900.0, 4.0], [4000.0, 5.0], [4200.0, 8.0], [4300.0, 11.0], [4100.0, 9.0], [4400.0, 7.0], [4500.0, 12.0], [4600.0, 8.0], [4700.0, 10.0], [4800.0, 8.0], [4900.0, 6.0], [5100.0, 8.0], [5000.0, 8.0], [5200.0, 6.0], [5300.0, 2.0], [5400.0, 4.0], [5600.0, 4.0], [5500.0, 6.0], [5700.0, 12.0], [5800.0, 5.0], [6000.0, 11.0], [5900.0, 7.0], [6100.0, 6.0], [6200.0, 3.0], [6300.0, 13.0], [6500.0, 7.0], [6600.0, 11.0], [6400.0, 11.0], [6700.0, 15.0], [6900.0, 9.0], [6800.0, 9.0], [7000.0, 11.0], [7100.0, 8.0], [7200.0, 8.0], [7300.0, 18.0], [7400.0, 8.0], [7600.0, 15.0], [7500.0, 5.0], [7700.0, 9.0], [7800.0, 8.0], [7900.0, 10.0], [8000.0, 10.0], [8100.0, 11.0], [8300.0, 5.0], [8700.0, 4.0], [8500.0, 14.0], [8200.0, 4.0], [8400.0, 4.0], [8600.0, 3.0], [8900.0, 8.0], [9200.0, 8.0], [9000.0, 8.0], [9100.0, 9.0], [8800.0, 8.0], [9400.0, 10.0], [9600.0, 9.0], [9300.0, 5.0], [9500.0, 11.0], [9700.0, 8.0], [10000.0, 5.0], [10200.0, 13.0], [9900.0, 10.0], [10100.0, 15.0], [9800.0, 7.0], [10600.0, 11.0], [10500.0, 8.0], [10300.0, 10.0], [10700.0, 8.0], [10400.0, 10.0], [11100.0, 5.0], [11200.0, 11.0], [11000.0, 12.0], [10800.0, 16.0], [10900.0, 10.0], [11500.0, 2.0], [11300.0, 8.0], [11700.0, 12.0], [11400.0, 2.0], [11600.0, 1.0], [12100.0, 6.0], [11800.0, 11.0], [11900.0, 4.0], [12000.0, 6.0], [12200.0, 7.0], [12400.0, 10.0], [12700.0, 10.0], [12600.0, 4.0], [12300.0, 5.0], [12500.0, 7.0], [12900.0, 9.0], [13200.0, 7.0], [13300.0, 12.0], [13100.0, 8.0], [12800.0, 8.0], [13000.0, 7.0], [13700.0, 10.0], [13600.0, 13.0], [13800.0, 11.0], [13400.0, 3.0], [13500.0, 13.0], [14100.0, 17.0], [14000.0, 10.0], [14200.0, 16.0], [14300.0, 9.0], [13900.0, 10.0], [14500.0, 8.0], [14800.0, 4.0], [14700.0, 4.0], [14400.0, 14.0], [14600.0, 2.0], [15100.0, 14.0], [14900.0, 5.0], [15300.0, 5.0], [15000.0, 12.0], [15200.0, 11.0], [15600.0, 8.0], [15500.0, 11.0], [15700.0, 9.0], [15800.0, 8.0], [15400.0, 9.0], [16000.0, 8.0], [16200.0, 11.0], [16100.0, 12.0], [16300.0, 9.0], [15900.0, 6.0], [17200.0, 5.0], [16400.0, 8.0], [17000.0, 15.0], [16800.0, 6.0], [16600.0, 3.0], [17400.0, 7.0], [18200.0, 11.0], [18000.0, 10.0], [18400.0, 7.0], [17800.0, 10.0], [17600.0, 4.0], [18800.0, 13.0], [19200.0, 13.0], [18600.0, 11.0], [19000.0, 7.0], [19400.0, 6.0], [19600.0, 9.0], [19800.0, 3.0], [20000.0, 6.0], [20200.0, 7.0], [20400.0, 6.0], [21200.0, 13.0], [21000.0, 14.0], [21400.0, 11.0], [20800.0, 7.0], [20600.0, 6.0], [22000.0, 5.0], [21800.0, 7.0], [21600.0, 8.0], [22200.0, 5.0], [22400.0, 6.0], [22800.0, 6.0], [22600.0, 7.0], [23000.0, 12.0], [23200.0, 15.0], [23400.0, 4.0], [24200.0, 5.0], [23600.0, 6.0], [24000.0, 9.0], [23800.0, 3.0], [24400.0, 9.0], [24600.0, 13.0], [24800.0, 13.0], [25000.0, 7.0], [25200.0, 4.0], [25400.0, 9.0], [26200.0, 11.0], [25600.0, 8.0], [25800.0, 11.0], [26000.0, 12.0], [26400.0, 9.0], [26600.0, 3.0], [27000.0, 14.0], [26800.0, 10.0], [27400.0, 11.0], [27600.0, 7.0], [27200.0, 9.0], [28600.0, 11.0], [27800.0, 4.0], [28400.0, 6.0], [28200.0, 7.0], [28000.0, 4.0], [29200.0, 9.0], [29400.0, 12.0], [28800.0, 13.0], [29000.0, 3.0], [29600.0, 2.0], [30400.0, 4.0], [30600.0, 4.0], [30000.0, 2.0], [29800.0, 5.0], [30200.0, 3.0], [30800.0, 3.0], [31000.0, 1.0], [31400.0, 2.0], [31800.0, 2.0], [34000.0, 1.0], [32800.0, 2.0], [34400.0, 1.0], [36800.0, 2.0], [37600.0, 2.0], [38000.0, 1.0], [37200.0, 3.0], [40800.0, 2.0], [67200.0, 1.0], [36300.0, 1.0], [37500.0, 4.0], [37100.0, 2.0], [40700.0, 1.0], [42700.0, 1.0], [67700.0, 1.0], [16500.0, 12.0], [17100.0, 16.0], [16700.0, 12.0], [16900.0, 10.0], [17300.0, 6.0], [18100.0, 8.0], [17900.0, 9.0], [17700.0, 9.0], [17500.0, 2.0], [18300.0, 11.0], [18500.0, 11.0], [18700.0, 8.0], [19100.0, 11.0], [19300.0, 7.0], [18900.0, 4.0], [19900.0, 13.0], [20100.0, 13.0], [19700.0, 11.0], [19500.0, 4.0], [20300.0, 8.0], [21300.0, 6.0], [20500.0, 12.0], [20700.0, 8.0], [20900.0, 6.0], [21100.0, 11.0], [21500.0, 9.0], [21900.0, 10.0], [21700.0, 14.0], [22100.0, 10.0], [22300.0, 9.0], [22500.0, 7.0], [22900.0, 11.0], [23300.0, 15.0], [23100.0, 7.0], [23500.0, 6.0], [22700.0, 8.0], [23900.0, 16.0], [23700.0, 9.0], [24500.0, 14.0], [24300.0, 7.0], [24100.0, 10.0], [24900.0, 8.0], [25500.0, 8.0], [24700.0, 11.0], [25300.0, 15.0], [25100.0, 10.0], [26100.0, 12.0], [26300.0, 10.0], [26500.0, 9.0], [25700.0, 10.0], [25900.0, 6.0], [26900.0, 4.0], [27100.0, 5.0], [27300.0, 8.0], [27500.0, 8.0], [26700.0, 7.0], [27700.0, 9.0], [28300.0, 12.0], [28100.0, 10.0], [27900.0, 10.0], [28500.0, 6.0], [28900.0, 6.0], [28700.0, 10.0], [29500.0, 6.0], [29300.0, 7.0], [29100.0, 5.0], [29700.0, 6.0], [30700.0, 3.0], [30100.0, 3.0], [29900.0, 3.0], [30500.0, 1.0], [30300.0, 1.0], [31100.0, 4.0], [31300.0, 3.0], [31700.0, 1.0], [30900.0, 1.0], [31900.0, 2.0], [32300.0, 3.0], [32700.0, 1.0], [33800.0, 1.0], [36600.0, 1.0], [37000.0, 2.0], [37800.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 67700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2456.0, "series": [{"data": [[0.0, 3.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 41.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2456.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 558.0834080717487, "minX": 1.58807412E12, "maxY": 1419.9855595667875, "series": [{"data": [[1.58807418E12, 558.0834080717487], [1.58807412E12, 1419.9855595667875]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58807418E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 386.0, "minX": 1.0, "maxY": 67731.0, "series": [{"data": [[2.0, 67731.0], [3.0, 67422.0], [4.0, 44104.0], [5.0, 42753.0], [6.0, 40759.0], [7.0, 40839.0], [8.0, 40834.0], [9.0, 36135.0], [10.0, 36137.0], [11.0, 34456.0], [12.0, 37288.0], [13.0, 37239.0], [14.0, 37308.0], [15.0, 32802.0], [16.0, 32799.0], [17.0, 37891.0], [18.0, 32897.0], [19.0, 37269.0], [20.0, 30702.0], [21.0, 30850.0], [22.0, 34052.0], [23.0, 31161.0], [24.0, 31308.0], [25.0, 31399.0], [26.0, 33792.0], [27.0, 33824.0], [28.0, 31424.0], [29.0, 31467.0], [30.0, 33710.0], [32.0, 30366.0], [35.0, 30419.0], [34.0, 30216.0], [37.0, 30877.0], [36.0, 30905.0], [39.0, 30189.0], [38.0, 30380.0], [41.0, 30137.0], [40.0, 31752.0], [43.0, 29973.0], [42.0, 30675.0], [45.0, 31182.0], [44.0, 30665.0], [47.0, 29974.0], [46.0, 29868.0], [48.0, 29843.0], [50.0, 33739.5], [53.0, 29803.0], [52.0, 30147.5], [55.0, 30481.0], [54.0, 37581.0], [57.0, 29916.0], [56.0, 29759.0], [59.0, 37790.0], [58.0, 29757.0], [61.0, 29870.0], [60.0, 37502.0], [63.0, 32394.0], [62.0, 29666.0], [66.0, 29435.0], [65.0, 32387.0], [64.0, 36379.0], [71.0, 30713.0], [69.0, 32309.0], [68.0, 29407.0], [75.0, 29533.0], [74.0, 37179.0], [73.0, 29397.0], [72.0, 29597.0], [79.0, 29463.0], [78.0, 30110.0], [77.0, 31313.0], [76.0, 29421.0], [83.0, 29314.0], [82.0, 37376.0], [81.0, 29378.0], [80.0, 29483.0], [87.0, 29348.0], [86.0, 31194.0], [85.0, 37807.0], [84.0, 30009.0], [91.0, 29223.0], [90.0, 30062.0], [89.0, 29592.0], [88.0, 29579.0], [95.0, 37097.0], [94.0, 38029.0], [93.0, 37169.0], [92.0, 37796.0], [99.0, 29250.0], [98.0, 29483.0], [97.0, 31034.0], [96.0, 31128.0], [103.0, 32987.0], [101.0, 29370.0], [100.0, 37555.0], [106.0, 29227.0], [105.0, 29169.0], [104.0, 29235.0], [111.0, 29105.0], [110.0, 29222.0], [109.0, 29245.0], [108.0, 29208.5], [115.0, 37286.5], [113.0, 37638.0], [112.0, 29319.0], [119.0, 29051.0], [118.0, 28772.0], [117.0, 36650.0], [116.0, 29168.0], [123.0, 29250.0], [122.0, 30693.0], [121.0, 29890.5], [127.0, 28656.0], [126.0, 32852.5], [124.0, 28985.0], [135.0, 29138.0], [133.0, 28854.0], [132.0, 28892.0], [131.0, 28832.0], [129.0, 28836.0], [128.0, 29732.0], [143.0, 28841.0], [142.0, 28974.0], [141.0, 30765.0], [140.0, 28831.0], [139.0, 28769.0], [138.0, 30818.0], [137.0, 28818.0], [136.0, 28774.0], [151.0, 28683.0], [150.0, 28732.0], [149.0, 29260.5], [147.0, 28688.0], [146.0, 30678.0], [145.0, 29431.0], [144.0, 28964.0], [159.0, 28534.0], [158.0, 28660.0], [157.0, 28720.0], [156.0, 28887.0], [155.0, 29032.0], [153.0, 28623.0], [152.0, 28874.0], [164.0, 14315.5], [166.0, 386.0], [165.0, 14306.5], [167.0, 28456.0], [163.0, 28820.0], [162.0, 28766.0], [161.0, 28250.0], [160.0, 30435.0], [175.0, 28035.0], [174.0, 28460.0], [173.0, 28037.0], [172.0, 28868.0], [170.0, 29673.0], [169.0, 28468.0], [168.0, 28760.0], [183.0, 27999.0], [182.0, 28605.0], [181.0, 28372.0], [180.0, 27922.0], [179.0, 28496.0], [177.0, 31970.0], [176.0, 28416.0], [191.0, 28060.0], [190.0, 27900.0], [189.0, 31870.0], [188.0, 27923.0], [187.0, 28337.0], [186.0, 31878.0], [185.0, 28310.0], [184.0, 28576.0], [198.0, 14794.0], [199.0, 28227.0], [197.0, 28451.0], [196.0, 28244.0], [195.0, 28316.0], [194.0, 27704.0], [193.0, 27706.0], [192.0, 27908.0], [205.0, 14332.5], [206.0, 29455.0], [204.0, 27546.0], [203.0, 28171.0], [202.0, 28173.0], [201.0, 27586.0], [200.0, 28167.0], [213.0, 14733.0], [214.0, 14492.5], [215.0, 27435.0], [212.0, 28444.0], [211.0, 28254.0], [210.0, 28106.0], [209.0, 29395.0], [208.0, 28314.5], [222.0, 14019.5], [223.0, 28334.0], [221.0, 27990.0], [220.0, 28346.0], [219.0, 27362.0], [218.0, 27985.0], [217.0, 28343.0], [216.0, 28813.0], [226.0, 14440.5], [231.0, 27793.0], [230.0, 27206.0], [229.0, 27307.0], [228.0, 28627.0], [227.0, 28672.0], [225.0, 27908.0], [224.0, 28300.0], [233.0, 14244.0], [239.0, 27697.0], [238.0, 27737.0], [237.0, 27740.0], [236.0, 27227.0], [235.0, 27778.0], [234.0, 28550.0], [232.0, 28187.0], [246.0, 9821.0], [247.0, 29454.0], [245.0, 27643.0], [244.0, 28470.0], [243.0, 27334.0], [242.0, 27762.0], [241.0, 29559.0], [240.0, 27115.0], [255.0, 27514.0], [254.0, 27884.0], [253.0, 27616.0], [252.0, 27269.0], [251.0, 27897.0], [250.0, 27002.0], [249.0, 27609.0], [248.0, 27100.0], [270.0, 27631.0], [257.0, 14185.5], [259.0, 9531.666666666666], [258.0, 27000.0], [261.0, 14013.0], [260.0, 27546.0], [263.0, 27480.0], [256.0, 28335.0], [262.0, 27669.0], [271.0, 27437.0], [265.0, 26904.0], [264.0, 27483.0], [269.0, 26777.0], [268.0, 26783.0], [267.0, 26840.0], [266.0, 27538.0], [287.0, 26842.333333333332], [273.0, 13969.0], [278.0, 27053.0], [272.0, 27538.0], [277.0, 27388.0], [286.0, 890.0], [285.0, 934.0], [284.0, 28703.0], [275.0, 26744.0], [274.0, 27278.0], [283.0, 27078.0], [282.0, 27223.0], [281.0, 28114.0], [280.0, 28013.0], [303.0, 27209.0], [290.0, 13771.0], [289.0, 26601.0], [288.0, 28752.0], [291.0, 27489.0], [297.0, 13857.0], [300.0, 7881.75], [299.0, 14207.0], [298.0, 14432.5], [301.0, 26498.0], [296.0, 26526.0], [295.0, 26545.0], [294.0, 27372.0], [293.0, 27365.0], [292.0, 27273.0], [318.0, 26830.0], [319.0, 27067.0], [317.0, 27068.0], [316.0, 26300.0], [315.0, 28668.0], [314.0, 27227.0], [313.0, 27241.0], [312.0, 27009.0], [311.0, 27077.0], [305.0, 26575.0], [304.0, 27917.0], [307.0, 26847.0], [306.0, 26723.0], [310.0, 27091.0], [309.0, 26434.0], [308.0, 26453.0], [334.0, 26164.0], [335.0, 26100.0], [333.0, 26047.0], [332.0, 26140.0], [331.0, 26480.0], [330.0, 26742.0], [329.0, 27624.0], [328.0, 26074.0], [327.0, 26812.0], [320.0, 26810.0], [323.0, 26153.0], [322.0, 26647.5], [326.0, 27091.0], [325.0, 26216.0], [324.0, 26871.0], [350.0, 25939.0], [336.0, 14368.0], [338.0, 13552.5], [337.0, 26096.0], [339.0, 26062.0], [342.0, 13668.0], [341.0, 27497.0], [340.0, 26136.0], [343.0, 26869.0], [351.0, 26435.0], [345.0, 26938.0], [344.0, 27457.0], [349.0, 26564.0], [348.0, 25951.0], [347.0, 26651.0], [346.0, 26000.0], [366.0, 26296.0], [357.0, 13610.0], [356.0, 26086.5], [359.0, 26355.0], [352.0, 27466.0], [354.0, 26499.0], [353.0, 26582.0], [358.0, 28139.0], [367.0, 25730.0], [365.0, 25802.0], [364.0, 26398.0], [363.0, 26426.0], [362.0, 26045.0], [361.0, 26351.0], [360.0, 28310.0], [383.0, 27105.0], [370.0, 13566.5], [369.0, 13724.5], [368.0, 26494.0], [375.0, 26579.0], [374.0, 26252.0], [373.0, 25817.5], [379.0, 13845.0], [381.0, 1356.0], [382.0, 25701.0], [380.0, 26266.0], [371.0, 25781.0], [378.0, 26309.0], [377.0, 25799.0], [376.0, 25815.0], [398.0, 25480.0], [384.0, 9594.333333333334], [395.0, 13704.0], [397.0, 25871.0], [387.0, 25957.5], [385.0, 26185.0], [394.0, 26299.0], [393.0, 25854.0], [392.0, 26153.0], [391.0, 26119.0], [390.0, 25578.0], [389.0, 25632.5], [414.0, 9461.0], [401.0, 20314.0], [403.0, 26299.0], [402.0, 25427.0], [407.0, 25766.0], [406.0, 26193.0], [405.0, 25966.0], [404.0, 25441.0], [415.0, 25714.0], [413.0, 25895.0], [412.0, 25339.0], [411.0, 25316.0], [410.0, 25770.0], [409.0, 25476.0], [408.0, 26232.0], [431.0, 25335.0], [416.0, 9453.333333333334], [423.0, 27725.0], [422.0, 26023.0], [421.0, 26111.0], [420.0, 25182.0], [417.0, 14279.5], [424.0, 13544.0], [428.0, 14074.5], [419.0, 25190.0], [418.0, 25205.0], [429.0, 26052.0], [427.0, 25501.0], [426.0, 25638.0], [425.0, 27175.0], [446.0, 25687.0], [440.0, 13725.0], [441.0, 13334.0], [447.0, 9854.333333333334], [445.0, 25507.0], [444.0, 25482.0], [443.0, 26327.0], [442.0, 25095.0], [439.0, 25752.0], [433.0, 25357.0], [432.0, 24989.0], [435.0, 25818.0], [434.0, 25327.0], [438.0, 25369.0], [437.0, 25550.0], [436.0, 25339.0], [462.0, 24822.0], [448.0, 13478.0], [450.0, 24853.0], [449.0, 24952.0], [455.0, 24876.0], [454.0, 27169.0], [453.0, 25248.0], [452.0, 25319.0], [451.0, 13489.0], [463.0, 24677.0], [461.0, 25956.0], [459.0, 24674.0], [458.0, 25195.0], [457.0, 28974.0], [456.0, 24737.0], [467.0, 1792.0], [469.0, 13313.0], [468.0, 25526.0], [471.0, 25083.0], [464.0, 24713.0], [466.0, 24571.0], [465.0, 25523.0], [470.0, 24669.0], [473.0, 13266.0], [479.0, 25041.0], [478.0, 25277.0], [477.0, 25444.0], [476.0, 25377.0], [475.0, 24586.5], [472.0, 25101.0], [494.0, 24769.0], [482.0, 13102.0], [481.0, 25314.0], [480.0, 24558.0], [483.0, 24573.0], [487.0, 25046.0], [486.0, 24729.0], [485.0, 25318.0], [484.0, 24686.0], [493.0, 14064.5], [492.0, 9268.666666666668], [495.0, 25679.0], [491.0, 24347.0], [490.0, 24870.0], [489.0, 25169.0], [488.0, 25195.0], [510.0, 24176.0], [504.0, 13355.0], [505.0, 13355.0], [509.0, 12999.0], [511.0, 24781.0], [508.0, 24811.5], [506.0, 24850.0], [503.0, 24495.0], [496.0, 24811.0], [498.0, 24745.0], [497.0, 24507.0], [502.0, 25105.0], [501.0, 24292.0], [500.0, 25199.0], [514.0, 25448.0], [536.0, 2122.0], [512.0, 24679.0], [526.0, 24948.0], [524.0, 24651.0], [522.0, 24522.0], [520.0, 24674.0], [530.0, 24895.0], [532.0, 25873.0], [534.0, 24536.0], [528.0, 7566.5], [538.0, 23983.0], [540.0, 24446.0], [560.0, 23727.0], [562.0, 1997.5], [556.0, 13479.5], [554.0, 23711.0], [552.0, 24077.0], [566.0, 23622.0], [564.0, 13105.5], [574.0, 23814.0], [570.0, 23609.0], [568.0, 24080.0], [550.0, 24580.0], [548.0, 26176.0], [546.0, 24448.0], [544.0, 24452.0], [558.0, 24384.0], [606.0, 23070.0], [592.0, 23289.0], [594.0, 23270.0], [596.0, 13106.0], [598.0, 24071.0], [604.0, 23719.0], [602.0, 23349.0], [600.0, 23248.0], [582.0, 24582.0], [580.0, 23339.0], [578.0, 23396.0], [576.0, 23626.0], [590.0, 23454.0], [588.0, 23486.0], [586.0, 24026.0], [584.0, 24042.0], [608.0, 23234.0], [618.0, 13200.0], [616.0, 22979.0], [620.0, 22864.0], [610.0, 23184.5], [622.0, 24092.0], [638.0, 25087.0], [636.0, 23703.5], [634.0, 23386.0], [632.0, 23620.0], [630.0, 22958.0], [628.0, 23017.0], [626.0, 22818.0], [624.0, 23379.0], [642.0, 22788.0], [668.0, 23094.0], [640.0, 27003.0], [644.0, 23007.5], [654.0, 24075.5], [652.0, 22738.0], [650.0, 23523.0], [648.0, 22829.0], [646.0, 9465.0], [664.0, 22621.0], [670.0, 8062.25], [656.0, 24867.0], [658.0, 23489.0], [660.0, 22501.0], [662.0, 23105.0], [666.0, 22465.0], [674.0, 22940.0], [702.0, 22563.0], [688.0, 8965.666666666668], [676.0, 12948.5], [672.0, 22548.0], [686.0, 22187.0], [684.0, 22254.0], [682.0, 22891.0], [680.0, 22253.0], [696.0, 23333.0], [678.0, 23260.0], [692.0, 12743.5], [690.0, 22981.0], [694.0, 9066.666666666668], [698.0, 12381.0], [700.0, 22770.0], [706.0, 13037.0], [704.0, 21903.0], [708.0, 21858.0], [710.0, 22523.0], [718.0, 22300.0], [716.0, 22345.0], [714.0, 21741.0], [712.0, 22458.0], [720.0, 21708.0], [722.0, 23988.0], [724.0, 21784.0], [726.0, 21811.0], [734.0, 22199.0], [730.0, 21713.0], [728.0, 22948.0], [738.0, 2045.0], [762.0, 21402.0], [736.0, 22354.0], [750.0, 21493.0], [748.0, 21930.0], [746.0, 21503.0], [744.0, 21566.0], [740.0, 14297.4], [752.0, 21480.0], [754.0, 21694.0], [756.0, 21658.0], [764.0, 23566.0], [760.0, 21626.0], [758.0, 21418.0], [770.0, 9066.0], [796.0, 21238.0], [768.0, 14252.0], [774.0, 21718.0], [776.0, 9107.0], [778.0, 21856.0], [780.0, 21593.0], [782.0, 21230.0], [784.0, 21559.0], [786.0, 21178.0], [788.0, 21548.0], [790.0, 21552.0], [798.0, 21003.0], [794.0, 21426.0], [800.0, 20949.0], [812.0, 26995.0], [810.0, 24968.0], [808.0, 21222.0], [802.0, 21751.0], [804.0, 21264.0], [806.0, 21209.0], [824.0, 21443.0], [826.0, 21149.0], [814.0, 3160.3333333333335], [816.0, 11735.5], [818.0, 20727.0], [820.0, 22986.0], [822.0, 20887.5], [830.0, 21138.0], [828.0, 21341.0], [834.0, 20647.0], [856.0, 3702.0], [838.0, 21152.0], [836.0, 21086.0], [832.0, 21076.0], [846.0, 20545.0], [844.0, 22621.0], [842.0, 20970.0], [840.0, 20622.0], [862.0, 20982.0], [860.0, 20447.0], [858.0, 20696.0], [854.0, 20860.0], [852.0, 21002.0], [850.0, 21233.0], [848.0, 20993.0], [868.0, 12195.0], [888.0, 12313.5], [866.0, 20526.0], [864.0, 20293.0], [870.0, 20220.0], [878.0, 20535.0], [876.0, 20125.0], [872.0, 20675.0], [882.0, 12335.5], [880.0, 20377.0], [884.0, 20151.0], [894.0, 12043.5], [892.0, 20310.0], [890.0, 20997.0], [926.0, 20738.0], [912.0, 8629.0], [914.0, 11809.0], [916.0, 19742.0], [918.0, 19980.0], [924.0, 19968.0], [922.0, 19544.0], [920.0, 19929.0], [902.0, 21859.5], [900.0, 23955.0], [898.0, 20256.0], [896.0, 20167.0], [910.0, 20303.5], [908.0, 19788.0], [906.0, 20761.0], [904.0, 20135.0], [932.0, 19481.0], [928.0, 21445.0], [930.0, 19784.0], [942.0, 19643.0], [934.0, 19764.0], [952.0, 20077.0], [938.0, 20049.0], [940.0, 19959.0], [956.0, 19198.0], [954.0, 19608.0], [946.0, 19501.333333333332], [948.0, 19700.0], [950.0, 19251.0], [958.0, 19101.0], [962.0, 11110.0], [966.0, 10770.5], [960.0, 11628.0], [964.0, 19849.0], [968.0, 19005.0], [970.0, 19429.0], [972.0, 19025.0], [974.0, 18951.0], [978.0, 19274.0], [980.0, 18869.0], [976.0, 14577.0], [988.0, 11562.5], [990.0, 19155.5], [986.0, 19835.0], [984.0, 19326.0], [994.0, 11598.0], [998.0, 9144.666666666668], [1000.0, 9084.666666666668], [1002.0, 19055.0], [1004.0, 22688.0], [1016.0, 18592.0], [1018.0, 18634.0], [996.0, 18814.5], [1006.0, 4472.0], [992.0, 19216.0], [1010.0, 8708.666666666668], [1008.0, 18794.0], [1012.0, 18630.0], [1014.0, 19040.5], [1022.0, 11542.5], [1072.0, 7185.2], [1080.0, 18217.0], [1024.0, 19370.0], [1032.0, 18675.0], [1036.0, 18483.0], [1084.0, 11096.0], [1056.0, 18695.0], [1076.0, 11872.5], [1044.0, 18300.0], [1040.0, 18343.0], [1048.0, 18436.0], [1052.0, 18765.0], [1064.0, 11388.0], [1068.0, 18311.0], [1092.0, 17905.0], [1144.0, 17123.0], [1096.0, 11116.0], [1100.0, 17485.0], [1088.0, 17733.0], [1116.0, 21909.0], [1112.0, 17974.0], [1108.0, 17496.0], [1140.0, 11807.5], [1136.0, 18202.0], [1124.0, 17660.0], [1120.0, 17899.0], [1128.0, 21234.0], [1132.0, 21343.0], [1148.0, 17132.0], [1204.0, 16499.0], [1212.0, 10840.0], [1168.0, 11131.0], [1184.0, 7765.0], [1196.0, 4540.0], [1192.0, 17121.0], [1188.0, 17474.0], [1208.0, 16731.0], [1200.0, 17013.0], [1152.0, 17857.0], [1156.0, 17929.0], [1160.0, 17142.0], [1164.0, 17150.0], [1180.0, 16778.0], [1176.0, 17044.666666666668], [1224.0, 16435.0], [1264.0, 16172.0], [1272.0, 10589.5], [1244.0, 10528.0], [1228.0, 16519.0], [1216.0, 16369.0], [1220.0, 16542.0], [1268.0, 16196.0], [1240.0, 16003.0], [1236.0, 16426.0], [1232.0, 16098.0], [1248.0, 12422.0], [1252.0, 16153.0], [1276.0, 16067.0], [1260.0, 15876.0], [1332.0, 15052.0], [1340.0, 15062.0], [1312.0, 4988.0], [1296.0, 10361.0], [1300.0, 15606.0], [1336.0, 15049.0], [1328.0, 15111.0], [1292.0, 15595.0], [1288.0, 16346.0], [1284.0, 16487.0], [1280.0, 16162.0], [1308.0, 16351.0], [1316.0, 15407.0], [1320.0, 10364.0], [1324.0, 15229.0], [1344.0, 15060.0], [1396.0, 14387.0], [1364.0, 9814.5], [1368.0, 14699.0], [1372.0, 14958.0], [1348.0, 15843.0], [1360.0, 9819.0], [1376.0, 16241.0], [1380.0, 14497.0], [1384.0, 14518.0], [1388.0, 14391.5], [1404.0, 14483.0], [1400.0, 14480.0], [1392.0, 11449.0], [1356.0, 14889.0], [1352.0, 15575.0], [1420.0, 14156.0], [1408.0, 14311.0], [1412.0, 10143.5], [1416.0, 14406.0], [1460.0, 10482.5], [1464.0, 13714.0], [1440.0, 14050.5], [1468.0, 15307.0], [1424.0, 9015.333333333334], [1428.0, 14110.0], [1432.0, 14088.0], [1436.0, 14166.0], [1444.0, 9666.0], [1452.0, 14117.0], [1448.0, 13957.0], [1476.0, 14937.5], [1520.0, 8605.666666666666], [1500.0, 9711.0], [1484.0, 13613.0], [1480.0, 13688.0], [1472.0, 13555.0], [1488.0, 9932.0], [1492.0, 13522.0], [1496.0, 13147.0], [1512.0, 13003.0], [1508.0, 13233.0], [1516.0, 12924.0], [1504.0, 13553.0], [1532.0, 9355.5], [1528.0, 14367.0], [1524.0, 13586.0], [1548.0, 9533.5], [1584.0, 12197.0], [1536.0, 7773.0], [1540.0, 12739.0], [1544.0, 13049.0], [1592.0, 8628.6], [1580.0, 12259.0], [1572.0, 12294.0], [1568.0, 12653.0], [1596.0, 9090.5], [1552.0, 10008.0], [1556.0, 9170.0], [1560.0, 9466.5], [1564.0, 12733.0], [1612.0, 11835.0], [1660.0, 9645.5], [1628.0, 11691.0], [1616.0, 14083.0], [1604.0, 14149.0], [1632.0, 6394.333333333333], [1636.0, 11768.0], [1640.0, 13625.0], [1644.0, 11597.0], [1648.0, 8583.0], [1652.0, 7819.2], [1656.0, 6386.0], [1672.0, 11079.0], [1696.0, 6895.0], [1668.0, 9651.0], [1712.0, 10745.0], [1716.0, 10827.0], [1720.0, 10824.0], [1724.0, 11528.0], [1680.0, 11253.0], [1684.0, 11384.0], [1692.0, 10869.0], [1664.0, 13271.0], [1700.0, 7698.5], [1708.0, 10798.0], [1704.0, 8734.5], [1780.0, 10143.0], [1764.0, 8725.5], [1756.0, 10030.0], [1752.0, 10412.0], [1748.0, 10265.0], [1744.0, 10460.0], [1768.0, 10102.0], [1772.0, 10226.0], [1784.0, 10427.5], [1760.0, 10239.0], [1776.0, 9161.666666666666], [1740.0, 10726.0], [1736.0, 12462.0], [1732.0, 10633.0], [1728.0, 10526.0], [1792.0, 8709.5], [1800.0, 10226.0], [1848.0, 6853.333333333333], [1796.0, 9990.0], [1804.0, 10585.0], [1820.0, 10722.0], [1816.0, 9681.0], [1812.0, 9681.0], [1808.0, 9635.0], [1824.0, 9837.0], [1852.0, 9148.0], [1844.0, 9143.0], [1840.0, 9186.0], [1832.0, 8270.0], [1828.0, 9560.0], [1836.0, 9229.0], [1856.0, 9052.0], [1860.0, 8445.0], [1884.0, 8817.0], [1876.0, 8864.0], [1872.0, 9031.0], [1880.0, 8943.0], [1888.0, 8366.0], [1892.0, 8662.0], [1916.0, 8157.0], [1908.0, 10537.0], [1904.0, 9605.0], [1868.0, 9125.0], [1864.0, 9195.0], [1912.0, 8376.0], [1896.0, 9395.0], [1900.0, 8565.0], [1920.0, 8599.0], [1932.0, 7836.0], [1948.0, 8236.0], [1944.0, 8440.0], [1936.0, 8715.333333333334], [1940.0, 8515.0], [1924.0, 7699.666666666667], [1928.0, 8384.5], [1968.0, 8240.0], [1976.0, 7887.0], [1980.0, 7670.0], [1952.0, 7875.0], [1956.0, 7454.5], [1960.0, 8140.0], [1964.0, 7435.0], [1984.0, 8233.5], [1988.0, 7492.0], [1992.0, 7616.0], [1029.0, 19535.5], [1077.0, 11185.0], [1025.0, 18823.0], [1033.0, 18589.0], [1073.0, 6782.4], [1037.0, 18783.0], [1081.0, 18193.0], [1045.0, 20142.0], [1041.0, 19209.0], [1049.0, 19277.0], [1053.0, 18549.0], [1069.0, 11478.5], [1065.0, 18383.0], [1057.0, 18683.0], [1089.0, 18036.0], [1097.0, 10467.0], [1093.0, 17993.0], [1101.0, 17774.0], [1137.0, 18130.0], [1141.0, 18040.0], [1117.0, 22011.0], [1113.0, 18352.0], [1109.0, 17820.0], [1105.0, 18764.5], [1121.0, 17664.0], [1125.0, 17899.0], [1129.0, 17543.0], [1133.0, 21222.0], [1149.0, 11666.0], [1145.0, 19180.0], [1161.0, 16994.0], [1213.0, 16836.0], [1201.0, 16841.0], [1165.0, 16852.0], [1157.0, 10710.0], [1153.0, 17333.0], [1169.0, 10931.5], [1173.0, 12611.333333333334], [1177.0, 18732.0], [1181.0, 17287.0], [1193.0, 17118.0], [1189.0, 17452.0], [1185.0, 17001.0], [1197.0, 17764.5], [1273.0, 16145.0], [1245.0, 10384.5], [1237.0, 10703.0], [1233.0, 17105.0], [1241.0, 16506.0], [1249.0, 16142.0], [1253.0, 15926.0], [1257.0, 16597.0], [1277.0, 4784.0], [1269.0, 15757.0], [1265.0, 16058.0], [1229.0, 16128.0], [1225.0, 17223.0], [1221.0, 17484.0], [1217.0, 16700.0], [1261.0, 16360.0], [1293.0, 15685.0], [1333.0, 10177.0], [1305.0, 12346.333333333334], [1309.0, 15715.0], [1285.0, 16700.0], [1281.0, 15715.0], [1313.0, 12220.0], [1317.0, 4540.0], [1321.0, 17209.0], [1325.0, 15364.0], [1341.0, 15099.0], [1337.0, 15037.0], [1357.0, 14890.0], [1361.0, 11080.0], [1369.0, 10382.5], [1365.0, 15190.0], [1393.0, 14286.0], [1353.0, 15198.0], [1345.0, 14919.0], [1397.0, 14485.0], [1377.0, 7605.6], [1381.0, 14471.0], [1405.0, 14374.0], [1401.0, 4798.0], [1389.0, 5079.0], [1385.0, 14448.0], [1421.0, 14180.0], [1465.0, 9502.5], [1409.0, 10390.0], [1413.0, 15043.0], [1417.0, 14137.0], [1457.0, 13727.0], [1461.0, 13651.0], [1441.0, 14168.0], [1425.0, 14180.0], [1429.0, 14458.0], [1433.0, 14229.0], [1437.0, 14178.0], [1445.0, 13928.0], [1449.0, 13911.0], [1477.0, 13520.0], [1529.0, 12822.0], [1485.0, 13570.0], [1481.0, 13651.0], [1473.0, 13674.0], [1501.0, 13539.0], [1489.0, 16037.0], [1493.0, 13487.0], [1497.0, 8520.333333333334], [1513.0, 13346.0], [1509.0, 13811.0], [1517.0, 12966.0], [1505.0, 13257.0], [1533.0, 9188.5], [1525.0, 13671.0], [1521.0, 13633.0], [1585.0, 9627.0], [1541.0, 12899.0], [1545.0, 12832.0], [1537.0, 10137.5], [1549.0, 13534.0], [1589.0, 13362.0], [1597.0, 8595.333333333334], [1581.0, 12546.0], [1577.0, 13656.5], [1573.0, 12442.0], [1593.0, 9712.5], [1553.0, 12581.0], [1557.0, 13303.0], [1561.0, 12493.0], [1601.0, 13400.0], [1629.0, 11822.0], [1621.0, 11783.5], [1617.0, 12113.0], [1605.0, 14198.0], [1609.0, 12159.0], [1613.0, 14063.0], [1633.0, 11766.5], [1641.0, 11870.0], [1645.0, 14181.0], [1649.0, 8294.666666666666], [1653.0, 9984.0], [1657.0, 11695.5], [1661.0, 12997.0], [1673.0, 11176.0], [1677.0, 10301.333333333334], [1669.0, 11307.0], [1713.0, 11001.0], [1717.0, 10868.0], [1721.0, 8875.5], [1725.0, 10777.5], [1681.0, 11142.0], [1685.0, 11313.0], [1689.0, 11105.666666666666], [1693.0, 10971.0], [1665.0, 11378.0], [1697.0, 10928.5], [1705.0, 7931.0], [1709.0, 11469.0], [1701.0, 10880.0], [1761.0, 10446.0], [1781.0, 8529.5], [1757.0, 10178.0], [1753.0, 10376.0], [1749.0, 10496.0], [1745.0, 10661.0], [1773.0, 8090.0], [1769.0, 10174.0], [1765.0, 10269.0], [1789.0, 7352.0], [1777.0, 8209.333333333334], [1741.0, 10572.0], [1737.0, 11077.0], [1733.0, 10629.0], [1729.0, 10490.0], [1797.0, 9980.0], [1793.0, 9025.0], [1801.0, 9828.0], [1805.0, 9707.0], [1821.0, 10300.0], [1817.0, 10190.0], [1813.0, 9528.0], [1809.0, 9882.0], [1825.0, 7692.0], [1849.0, 9634.5], [1845.0, 8231.5], [1841.0, 9542.0], [1829.0, 11004.0], [1833.0, 9423.0], [1837.0, 8977.0], [1857.0, 8485.0], [1861.0, 11288.0], [1885.0, 8898.0], [1873.0, 8855.0], [1877.0, 8773.0], [1881.0, 8935.0], [1889.0, 8818.0], [1917.0, 8287.0], [1905.0, 8744.0], [1869.0, 9494.0], [1865.0, 9580.0], [1913.0, 9609.0], [1897.0, 9292.0], [1921.0, 9138.0], [1925.0, 9337.0], [1949.0, 8042.0], [1945.0, 8316.0], [1937.0, 8218.0], [1941.0, 8082.0], [1929.0, 9222.0], [1933.0, 8070.0], [1977.0, 7597.0], [1957.0, 7671.0], [1961.0, 8087.0], [1965.0, 8447.5], [1953.0, 7978.0], [1985.0, 7839.0], [1997.0, 7359.0], [1989.0, 7488.0], [515.0, 25429.0], [541.0, 23991.0], [519.0, 16688.0], [517.0, 24438.5], [513.0, 24717.0], [527.0, 24937.0], [525.0, 24622.0], [523.0, 24557.0], [529.0, 13460.0], [531.0, 24585.0], [533.0, 24571.0], [535.0, 23903.0], [537.0, 16693.666666666668], [543.0, 24202.0], [539.0, 24816.0], [571.0, 23580.0], [555.0, 24661.0], [553.0, 24652.0], [557.0, 12843.5], [563.0, 15447.0], [565.0, 9611.0], [567.0, 24347.0], [575.0, 23605.0], [573.0, 23946.5], [569.0, 24329.0], [551.0, 24013.0], [549.0, 24428.0], [547.0, 24439.0], [545.0, 24138.0], [559.0, 23798.0], [607.0, 23253.0], [603.0, 23332.0], [593.0, 12715.0], [595.0, 9403.0], [597.0, 23199.0], [599.0, 23200.0], [605.0, 23016.0], [601.0, 23387.0], [583.0, 23996.0], [581.0, 25685.0], [579.0, 23390.0], [577.0, 24368.0], [591.0, 24174.0], [589.0, 25538.0], [587.0, 23346.0], [585.0, 24154.0], [623.0, 23762.0], [637.0, 9362.666666666668], [617.0, 23232.0], [619.0, 23727.0], [621.0, 23503.0], [611.0, 25348.0], [615.0, 24829.5], [613.0, 23112.0], [639.0, 23550.0], [633.0, 22949.0], [631.0, 23346.0], [629.0, 23359.0], [627.0, 23422.0], [625.0, 23034.0], [647.0, 23546.0], [643.0, 2680.0], [641.0, 25069.0], [655.0, 22573.0], [651.0, 22803.0], [649.0, 22638.0], [665.0, 22458.0], [645.0, 12421.0], [663.0, 12611.5], [669.0, 12692.0], [671.0, 23722.0], [657.0, 23087.0], [659.0, 23150.0], [661.0, 24514.0], [667.0, 22790.0], [673.0, 24675.0], [697.0, 13116.0], [687.0, 23094.0], [675.0, 22338.0], [685.0, 22189.0], [683.0, 22965.0], [681.0, 23056.0], [679.0, 22272.0], [677.0, 22275.0], [691.0, 22472.0], [689.0, 23115.0], [695.0, 22053.0], [693.0, 9341.333333333332], [699.0, 22015.0], [701.0, 24295.0], [703.0, 22748.0], [707.0, 22302.0], [733.0, 22811.5], [705.0, 22356.0], [709.0, 24219.0], [719.0, 21711.0], [717.0, 21874.0], [715.0, 21734.0], [713.0, 22467.0], [711.0, 9945.666666666668], [721.0, 8854.666666666668], [723.0, 22147.0], [725.0, 22308.0], [727.0, 22242.0], [735.0, 23921.0], [731.0, 21706.0], [729.0, 23011.0], [761.0, 22634.0], [737.0, 22517.0], [751.0, 21438.0], [749.0, 21941.0], [747.0, 21849.0], [745.0, 21969.0], [765.0, 25579.0], [753.0, 21464.0], [755.0, 21850.0], [757.0, 21772.0], [763.0, 21769.0], [743.0, 21638.5], [741.0, 23908.0], [759.0, 22534.0], [769.0, 21990.0], [775.0, 4604.583333333333], [773.0, 22050.0], [771.0, 21270.0], [793.0, 22173.5], [777.0, 23182.0], [779.0, 21248.0], [781.0, 22374.0], [783.0, 21161.0], [799.0, 22133.0], [785.0, 23322.0], [787.0, 23292.0], [789.0, 21559.0], [791.0, 21746.0], [797.0, 21024.0], [795.0, 22179.0], [815.0, 9257.166666666668], [825.0, 22923.0], [829.0, 12497.0], [813.0, 12331.5], [811.0, 20815.0], [809.0, 26271.0], [801.0, 21337.0], [803.0, 23083.0], [805.0, 21959.0], [807.0, 20834.0], [817.0, 6639.6], [819.0, 21150.0], [823.0, 20753.0], [831.0, 21072.0], [827.0, 21092.0], [835.0, 21019.0], [861.0, 12188.0], [839.0, 20855.0], [837.0, 21004.0], [833.0, 20689.0], [847.0, 21309.0], [845.0, 21194.0], [843.0, 20490.0], [841.0, 20546.0], [863.0, 20382.0], [859.0, 20461.0], [857.0, 20897.5], [855.0, 21034.0], [853.0, 20591.0], [851.0, 21153.0], [849.0, 20870.0], [867.0, 20317.0], [893.0, 19977.0], [865.0, 20663.0], [869.0, 20836.0], [871.0, 20584.0], [879.0, 20819.0], [877.0, 21158.0], [875.0, 21157.5], [873.0, 20232.0], [881.0, 20166.0], [883.0, 22173.0], [887.0, 20374.0], [885.0, 20512.0], [895.0, 20275.0], [891.0, 20334.0], [889.0, 19965.0], [927.0, 11397.0], [923.0, 3574.0], [915.0, 19931.0], [917.0, 20339.0], [919.0, 19728.0], [913.0, 9197.333333333332], [925.0, 20735.0], [921.0, 20470.0], [903.0, 20160.0], [899.0, 20707.0], [897.0, 20111.0], [911.0, 20537.0], [907.0, 19673.0], [905.0, 20138.0], [931.0, 6701.0], [953.0, 11377.5], [929.0, 8722.0], [943.0, 19732.0], [935.0, 11756.0], [933.0, 19956.0], [939.0, 11213.0], [937.0, 19566.0], [941.0, 11703.0], [957.0, 11872.5], [955.0, 19613.0], [959.0, 19164.0], [947.0, 19257.0], [949.0, 19690.0], [951.0, 19638.0], [963.0, 19461.0], [961.0, 19083.0], [965.0, 11858.5], [969.0, 12301.0], [971.0, 21014.0], [973.0, 20152.0], [975.0, 3735.0], [977.0, 11564.0], [979.0, 18970.0], [983.0, 19700.5], [981.0, 19016.0], [991.0, 19743.0], [987.0, 11533.0], [985.0, 19285.0], [967.0, 19367.0], [1007.0, 20712.0], [1001.0, 19607.0], [1003.0, 18789.0], [1005.0, 18783.0], [999.0, 9364.666666666668], [1017.0, 20590.0], [1019.0, 18886.0], [997.0, 7865.25], [993.0, 18830.0], [1009.0, 19165.0], [1011.0, 19065.0], [1015.0, 18692.0], [1023.0, 11124.5], [1021.0, 18859.0], [1038.0, 18613.0], [1030.0, 11642.0], [1026.0, 18545.0], [1034.0, 19246.0], [1086.0, 13574.0], [1062.0, 18214.333333333332], [1058.0, 18225.0], [1074.0, 18277.0], [1078.0, 19914.0], [1082.0, 18044.0], [1046.0, 4515.0], [1042.0, 18371.0], [1050.0, 18224.0], [1054.0, 11246.5], [1070.0, 18292.0], [1066.0, 18367.0], [1098.0, 17758.0], [1102.0, 11166.5], [1090.0, 8262.0], [1118.0, 17622.0], [1110.0, 18095.0], [1106.0, 17569.0], [1094.0, 10909.0], [1138.0, 17118.0], [1142.0, 17454.0], [1126.0, 11295.0], [1122.0, 17379.0], [1130.0, 17176.0], [1134.0, 18081.0], [1150.0, 17361.0], [1214.0, 17337.0], [1174.0, 4747.5], [1170.0, 17060.0], [1194.0, 16894.0], [1190.0, 18579.0], [1186.0, 16969.0], [1198.0, 10594.0], [1210.0, 16732.0], [1206.0, 17185.0], [1202.0, 16984.0], [1182.0, 17012.0], [1154.0, 17053.0], [1158.0, 17162.0], [1162.0, 17111.0], [1166.0, 18832.0], [1178.0, 17067.0], [1218.0, 16294.0], [1222.0, 8786.666666666666], [1230.0, 16391.0], [1226.0, 16649.0], [1246.0, 16183.0], [1266.0, 16280.0], [1270.0, 15980.0], [1242.0, 8606.0], [1238.0, 16102.0], [1234.0, 16385.0], [1250.0, 16285.0], [1254.0, 16114.0], [1278.0, 9579.4], [1274.0, 16614.0], [1258.0, 10853.0], [1262.0, 15840.0], [1294.0, 16565.0], [1330.0, 15131.5], [1306.0, 10472.0], [1298.0, 15612.0], [1302.0, 15642.0], [1342.0, 9682.0], [1338.0, 15126.0], [1290.0, 16400.5], [1286.0, 16007.0], [1282.0, 15620.0], [1310.0, 15524.0], [1318.0, 9417.0], [1314.0, 15352.0], [1322.0, 10729.5], [1326.0, 15154.0], [1394.0, 7165.857142857143], [1398.0, 15279.0], [1366.0, 15583.0], [1346.0, 15219.0], [1370.0, 16460.0], [1350.0, 12067.333333333334], [1362.0, 10679.0], [1406.0, 15070.0], [1378.0, 14976.0], [1382.0, 15267.0], [1386.0, 14791.0], [1390.0, 14296.0], [1402.0, 10169.0], [1358.0, 15580.0], [1354.0, 15222.0], [1422.0, 14455.0], [1414.0, 14244.0], [1410.0, 8657.333333333334], [1418.0, 14442.0], [1458.0, 13568.0], [1462.0, 14050.0], [1442.0, 13907.0], [1470.0, 13888.5], [1466.0, 13876.0], [1426.0, 14092.0], [1430.0, 14225.0], [1434.0, 14058.0], [1446.0, 9866.5], [1454.0, 14094.5], [1450.0, 14576.0], [1474.0, 13710.0], [1482.0, 13806.0], [1486.0, 13951.0], [1478.0, 13877.0], [1502.0, 13078.0], [1490.0, 13304.0], [1494.0, 13196.0], [1498.0, 14765.0], [1506.0, 8948.0], [1514.0, 14738.0], [1510.0, 13822.0], [1518.0, 6194.0], [1534.0, 9606.0], [1530.0, 13511.0], [1526.0, 13198.0], [1522.0, 12902.0], [1586.0, 12358.0], [1538.0, 8265.25], [1546.0, 12878.0], [1550.0, 12785.0], [1590.0, 6086.0], [1594.0, 9371.0], [1598.0, 9314.333333333334], [1578.0, 12560.0], [1574.0, 12601.0], [1570.0, 12868.0], [1554.0, 12904.0], [1562.0, 11133.0], [1566.0, 13411.5], [1606.0, 13848.0], [1650.0, 7568.4], [1630.0, 9001.0], [1618.0, 11817.0], [1602.0, 11985.0], [1610.0, 11871.0], [1614.0, 11807.0], [1634.0, 12004.0], [1638.0, 13247.5], [1642.0, 11876.0], [1646.0, 11704.0], [1654.0, 11299.0], [1658.0, 11267.0], [1662.0, 14153.0], [1674.0, 11206.0], [1714.0, 10898.0], [1670.0, 14121.0], [1678.0, 11020.0], [1718.0, 8455.666666666666], [1722.0, 10891.0], [1726.0, 10849.0], [1682.0, 11204.0], [1686.0, 11055.0], [1690.0, 10908.0], [1666.0, 14193.0], [1694.0, 10965.0], [1698.0, 11276.0], [1710.0, 11790.0], [1706.0, 10793.0], [1702.0, 11135.0], [1778.0, 8515.5], [1758.0, 8452.5], [1754.0, 10656.0], [1750.0, 10407.0], [1746.0, 10978.0], [1770.0, 10295.0], [1766.0, 10328.0], [1774.0, 8289.5], [1786.0, 6707.0], [1782.0, 10110.0], [1762.0, 10081.0], [1790.0, 10083.666666666666], [1742.0, 10298.0], [1738.0, 10630.0], [1734.0, 10685.0], [1730.0, 10745.0], [1798.0, 10276.0], [1794.0, 8496.5], [1802.0, 10199.0], [1806.0, 10059.0], [1822.0, 8697.5], [1818.0, 9558.0], [1814.0, 9765.0], [1810.0, 9792.0], [1854.0, 9242.5], [1850.0, 9550.0], [1846.0, 8129.0], [1826.0, 8357.5], [1830.0, 9260.0], [1834.0, 9436.0], [1838.0, 9835.0], [1858.0, 9059.0], [1906.0, 8420.0], [1914.0, 8669.5], [1862.0, 9252.0], [1886.0, 9107.0], [1874.0, 8849.0], [1878.0, 9431.0], [1882.0, 10297.0], [1890.0, 9377.0], [1918.0, 8111.0], [1910.0, 9011.5], [1870.0, 9088.0], [1866.0, 9000.0], [1898.0, 8547.0], [1902.0, 8763.0], [1894.0, 8410.25], [1922.0, 7522.5], [1926.0, 7889.0], [1950.0, 7905.0], [1946.0, 8199.0], [1938.0, 7998.0], [1942.0, 7778.5], [1930.0, 10042.0], [1934.0, 7341.0], [1974.0, 7520.75], [1982.0, 7816.333333333333], [1958.0, 7992.5], [1962.0, 8184.0], [1966.0, 7677.0], [1954.0, 8173.0], [1986.0, 7538.0], [1990.0, 7477.0], [1031.0, 8871.666666666668], [1035.0, 11565.5], [1027.0, 18834.0], [1039.0, 18608.0], [1075.0, 17903.0], [1083.0, 10925.5], [1079.0, 18095.0], [1047.0, 10059.4], [1043.0, 18536.0], [1051.0, 18531.0], [1055.0, 7569.75], [1067.0, 20119.0], [1063.0, 18361.0], [1059.0, 18473.0], [1071.0, 17994.0], [1087.0, 18590.0], [1095.0, 17872.0], [1143.0, 11313.5], [1091.0, 7675.0], [1099.0, 17865.0], [1103.0, 17814.0], [1139.0, 18136.0], [1119.0, 13052.0], [1115.0, 17715.0], [1111.0, 17428.0], [1107.0, 17838.0], [1123.0, 10178.0], [1127.0, 17190.0], [1131.0, 17760.0], [1135.0, 17183.0], [1147.0, 17563.0], [1151.0, 11685.0], [1203.0, 16495.0], [1159.0, 8744.666666666668], [1215.0, 10552.5], [1211.0, 16763.0], [1207.0, 16760.0], [1167.0, 17368.0], [1163.0, 16940.0], [1155.0, 17280.0], [1171.0, 18837.0], [1179.0, 11179.5], [1195.0, 10639.0], [1191.0, 16939.0], [1187.0, 16954.0], [1199.0, 16838.0], [1183.0, 8489.666666666668], [1271.0, 16694.0], [1247.0, 5179.0], [1243.0, 10182.5], [1235.0, 18089.0], [1239.0, 16284.0], [1279.0, 10401.5], [1251.0, 16773.0], [1255.0, 16794.0], [1275.0, 15745.0], [1267.0, 15826.0], [1231.0, 16511.0], [1227.0, 18136.0], [1223.0, 16557.0], [1219.0, 16243.0], [1259.0, 8900.333333333334], [1263.0, 7827.5], [1291.0, 15616.0], [1343.0, 15100.0], [1303.0, 15622.0], [1299.0, 15557.0], [1307.0, 15514.0], [1331.0, 15255.0], [1295.0, 15724.0], [1287.0, 15737.0], [1283.0, 15888.0], [1311.0, 15457.0], [1315.0, 10231.5], [1319.0, 15546.0], [1323.0, 17181.0], [1327.0, 15154.0], [1339.0, 15130.0], [1335.0, 15603.0], [1355.0, 15741.0], [1395.0, 15120.0], [1403.0, 14316.5], [1363.0, 7284.0], [1367.0, 15012.0], [1371.0, 15511.0], [1359.0, 15214.0], [1347.0, 15318.0], [1375.0, 14681.333333333334], [1379.0, 14485.0], [1407.0, 14313.0], [1399.0, 9459.5], [1383.0, 9939.5], [1391.0, 9891.0], [1423.0, 10240.5], [1415.0, 10629.0], [1411.0, 14303.0], [1419.0, 14187.0], [1459.0, 16220.0], [1463.0, 9695.0], [1471.0, 14549.0], [1467.0, 13589.0], [1427.0, 14146.0], [1431.0, 13948.0], [1435.0, 14705.0], [1439.0, 9853.0], [1443.0, 10061.0], [1455.0, 13768.0], [1451.0, 14031.0], [1447.0, 13782.0], [1483.0, 13692.0], [1487.0, 8623.0], [1479.0, 13488.0], [1503.0, 13386.0], [1491.0, 13335.0], [1495.0, 14036.0], [1499.0, 9243.5], [1515.0, 9248.5], [1511.0, 13001.0], [1507.0, 13355.0], [1519.0, 13238.0], [1535.0, 9280.5], [1531.0, 12834.0], [1527.0, 13221.0], [1523.0, 12930.0], [1551.0, 12733.0], [1547.0, 10495.0], [1539.0, 9582.5], [1543.0, 13235.0], [1587.0, 12435.0], [1591.0, 7880.25], [1595.0, 12095.0], [1583.0, 12386.5], [1579.0, 13867.0], [1575.0, 12593.0], [1571.0, 14252.0], [1555.0, 12573.0], [1559.0, 12787.5], [1567.0, 12582.0], [1563.0, 12735.0], [1603.0, 12225.0], [1627.0, 12531.6], [1623.0, 12050.0], [1619.0, 11835.0], [1631.0, 13600.0], [1607.0, 12294.0], [1611.0, 11858.0], [1615.0, 11922.0], [1635.0, 7769.0], [1639.0, 11931.0], [1643.0, 11810.0], [1647.0, 13389.0], [1651.0, 11311.0], [1655.0, 13791.0], [1659.0, 13392.0], [1663.0, 13310.0], [1675.0, 11483.0], [1671.0, 11072.0], [1679.0, 11007.0], [1715.0, 11026.0], [1719.0, 10566.0], [1723.0, 6489.0], [1727.0, 10859.0], [1683.0, 8774.0], [1691.0, 11005.0], [1695.0, 8278.0], [1667.0, 11216.0], [1699.0, 8887.5], [1711.0, 10728.0], [1707.0, 10806.0], [1703.0, 10915.0], [1779.0, 10341.0], [1755.0, 10851.0], [1751.0, 10911.0], [1747.0, 10813.0], [1771.0, 8378.0], [1767.0, 10648.0], [1775.0, 6492.0], [1787.0, 10206.333333333334], [1791.0, 7352.666666666667], [1763.0, 10143.0], [1743.0, 10486.0], [1739.0, 10711.0], [1735.0, 10612.0], [1731.0, 10437.0], [1799.0, 10264.0], [1807.0, 7890.75], [1795.0, 9933.0], [1803.0, 9703.0], [1819.0, 9697.0], [1815.0, 9589.0], [1823.0, 8267.666666666666], [1855.0, 9107.0], [1851.0, 9340.0], [1847.0, 8114.0], [1843.0, 9965.0], [1831.0, 9444.0], [1835.0, 9608.0], [1839.0, 8142.5], [1863.0, 8475.5], [1871.0, 9041.0], [1859.0, 7737.4], [1887.0, 8859.0], [1875.0, 8987.0], [1879.0, 8911.0], [1883.0, 7973.0], [1891.0, 11167.0], [1915.0, 7949.0], [1919.0, 9118.0], [1911.0, 7734.5], [1907.0, 10304.0], [1867.0, 9201.0], [1895.0, 7038.0], [1899.0, 8550.0], [1903.0, 9036.0], [1923.0, 8090.0], [1927.0, 7943.5], [1951.0, 8158.0], [1947.0, 8431.0], [1943.0, 7871.0], [1939.0, 8357.0], [1931.0, 9479.0], [1971.0, 7878.0], [1975.0, 7704.0], [1983.0, 7962.0], [1959.0, 8112.0], [1963.0, 7445.5], [1955.0, 7841.0], [1991.0, 7645.0], [1987.0, 7410.5], [1995.0, 7599.333333333333], [1.0, 67225.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1035.5776000000003, 16466.90919999997]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1997.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2267.1666666666665, "minX": 1.58807412E12, "maxY": 13526.833333333334, "series": [{"data": [[1.58807418E12, 2267.1666666666665], [1.58807412E12, 2816.1666666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58807418E12, 10889.833333333334], [1.58807412E12, 13526.833333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58807418E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 9901.675812274356, "minX": 1.58807412E12, "maxY": 24621.93004484306, "series": [{"data": [[1.58807418E12, 24621.93004484306], [1.58807412E12, 9901.675812274356]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58807418E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 9901.619494584871, "minX": 1.58807412E12, "maxY": 24621.900448430486, "series": [{"data": [[1.58807418E12, 24621.900448430486], [1.58807412E12, 9901.619494584871]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58807418E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4.860986547085207, "minX": 1.58807412E12, "maxY": 15.162454873646185, "series": [{"data": [[1.58807418E12, 4.860986547085207], [1.58807412E12, 15.162454873646185]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58807418E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 385.0, "minX": 1.58807412E12, "maxY": 67731.0, "series": [{"data": [[1.58807418E12, 67731.0], [1.58807412E12, 22011.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58807418E12, 17428.0], [1.58807412E12, 385.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58807418E12, 29454.4], [1.58807412E12, 16362.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58807418E12, 37805.24], [1.58807412E12, 18713.08]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58807418E12, 31216.800000000007], [1.58807412E12, 17076.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58807418E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 811.5, "minX": 1.0, "maxY": 54032.0, "series": [{"data": [[2.0, 36688.0], [39.0, 2467.0], [43.0, 30850.0], [47.0, 1636.0], [3.0, 54032.0], [53.0, 15198.0], [54.0, 4917.5], [59.0, 11988.0], [60.0, 8460.0], [61.0, 15810.5], [62.0, 8552.0], [63.0, 18968.5], [64.0, 11618.0], [65.0, 10059.0], [67.0, 17379.0], [66.0, 18808.5], [1.0, 42753.0], [68.0, 25651.0], [71.0, 28688.0], [69.0, 19585.0], [70.0, 21115.0], [73.0, 15888.0], [30.0, 811.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 73.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 811.0, "minX": 1.0, "maxY": 54032.0, "series": [{"data": [[2.0, 36688.0], [39.0, 2467.0], [43.0, 30850.0], [47.0, 1636.0], [3.0, 54032.0], [53.0, 15198.0], [54.0, 4917.5], [59.0, 11988.0], [60.0, 8460.0], [61.0, 15810.5], [62.0, 8552.0], [63.0, 18968.5], [64.0, 11618.0], [65.0, 10059.0], [67.0, 17379.0], [66.0, 18808.5], [1.0, 42753.0], [68.0, 25651.0], [71.0, 28688.0], [69.0, 19585.0], [70.0, 21115.0], [73.0, 15888.0], [30.0, 811.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 73.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.58807412E12, "maxY": 41.666666666666664, "series": [{"data": [[1.58807412E12, 41.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58807412E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 18.583333333333332, "minX": 1.58807412E12, "maxY": 23.083333333333332, "series": [{"data": [[1.58807418E12, 18.583333333333332], [1.58807412E12, 23.083333333333332]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58807418E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 18.583333333333332, "minX": 1.58807412E12, "maxY": 23.083333333333332, "series": [{"data": [[1.58807418E12, 18.583333333333332], [1.58807412E12, 23.083333333333332]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58807418E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 18.583333333333332, "minX": 1.58807412E12, "maxY": 23.083333333333332, "series": [{"data": [[1.58807418E12, 18.583333333333332], [1.58807412E12, 23.083333333333332]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58807418E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

